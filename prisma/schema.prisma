generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stock {
  id               String         @id @default(cuid())
  itemCode         String?
  itemName         String
  category         String
  color            String         @default("Not Specified")
  quantity         Int
  unitPrice        Float
  supplier         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  stockID          String         @unique
  profitAmount     Float?
  profitPercentage Float?
  sellingPrice     Float?
  purchaseItems    PurchaseItem[]

  @@map("stocks")
}

model Purchase {
  id             String         @id @default(cuid())
  invoiceNumber  String         @unique
  customerName   String         @default("Walk-in Customer")
  customerPhone  String?
  customerEmail  String?
  notes          String?
  subtotal       Float
  discountType   String?
  discountValue  Float?
  discountAmount Float          @default(0)
  taxAmount      Float          @default(0)
  totalAmount    Float
  paymentMethod  String
  paymentStatus  String         @default("completed")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isSplitPayment Boolean        @default(false)
  payments       Payment[]
  items          PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id         String   @id @default(cuid())
  purchaseId String
  stockId    String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  stock      Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@map("purchase_items")
}

model Transport {
  id              String   @id @default(cuid())
  inDate          DateTime
  numberOfBundles Int
  freightCharges  Float
  invoiceNo       String   @unique
  amount          Float
  gst             Float
  totalAmount     Float
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("transports")
}

model Payment {
  id            String   @id @default(cuid())
  purchaseId    String
  paymentMethod String
  amount        Float
  status        String   @default("completed")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  purchase      Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@map("payments")
}
